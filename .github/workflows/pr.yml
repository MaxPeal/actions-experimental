on:
  pull_request:

env:
  HOGE: pr_hoge_global

jobs:
  exp:
    name: Experimental
    runs-on: ubuntu-latest

    steps:
    - id: checkout
      uses: actions/checkout@v2

    - name: Generate dotenv
      id: generate-dotenv
      run: cp .env.sample .env

    - name: Lint dotenv
      id: lint-dotenv
      uses: docker://dotenvlinter/dotenv-linter:latest

    - name: Setup and Run test
      id: setup-and-run-test
      run: |
        eval "$(cat .env | awk '!/^#/' | awk '/./{print $0}' | sed -e 's/^/export /g')"
        env

    - id: my-slack-post
      name: my slack post message action
      #uses: pullreminders/slack-action@master
      uses: ./.github/actions/my-slack-post-message
      with:
        bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
        text: "@here Slackにメッセージ飛ばしてみてるで text"
        # See: https://api.slack.com/reference/block-kit/blocks
        blocks: |
          [
            {
              "type": "section",
              "text": {
                "type": "plain_text",
                "text": "@here Slackにblocksのtextから送信しとるで"
              }
            }
          ]
        # (DEPRECATED)
        # attachments: |
        #   [
        #     {
        #       "color": "good",
        #       "author_name": "${{ github.actor }}",
        #       "author_icon": "${{ github.event.sender.avatar_url }}",
        #       "fields": [
        #         {
        #           "title": "GitHub Actions URL",
        #           "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
        #         },
        #         {
        #           "title": "Latest Commit Hash",
        #           "value": "${{ github.event.after }}"
        #         }
        #       ]
        #     }
        #   ]

    - id: my-slack-post-on-failure
      name: my slack post message action on failure
      if: ${{ failure() }}
      uses: ./.github/actions/my-slack-post-message
      with:
        bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
        text: "なんか失敗したで！！"

    - id: dump-contexts-after
      name: Dump contexts (After)
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        ENV_CONTEXT: ${{ toJson(env) }}
        JOB_CONTEXT: ${{ toJson(job) }}
        STEPS_CONTEXT: ${{ toJson(steps) }}
        RUNNER_CONTEXT: ${{ toJson(runner) }}
        NEEDS_CONTEXT: ${{ toJson(needs) }}
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      if: ${{ always() }}
      run: |
        echo ">>>>>>>>>> show GITHUB_CONTEXT"
        echo "$GITHUB_CONTEXT"
        echo ">>>>>>>>>> show ENV_CONTEXT"
        echo "$ENV_CONTEXT"
        echo ">>>>>>>>>> show JOB_CONTEXT"
        echo "$JOB_CONTEXT"
        echo ">>>>>>>>>> show STEPS_CONTEXT"
        echo "$STEPS_CONTEXT"
        echo ">>>>>>>>>> show RUNNER_CONTEXT"
        echo "$RUNNER_CONTEXT"
        echo ">>>>>>>>>> show NEEDS_CONTEXT"
        echo "$NEEDS_CONTEXT"
        echo ">>>>>>>>>> show STRATEGY_CONTEXT"
        echo "$STRATEGY_CONTEXT"
        echo ">>>>>>>>>> show MATRIX_CONTEXT"
        echo "$MATRIX_CONTEXT"


# TODO: AWS連携 実験


# TODO: Google Drive APIを呼ぶ実験


  ###
  # dummy jobs
  ###

  job1:
    name: Job1
    runs-on: ubuntu-latest

    outputs:
      output1: ${{ steps.step1.outputs.output-step1 }}
      output2: ${{ steps.step2.outputs.output-step2 }}

    steps:
    - id: step1
      run: echo "::set-output name=output-step1::pr"

    - id: step2
      run: echo "::set-output name=output-step2::triggered"

    - id: checkout
      uses: actions/checkout@v2

    # 自作Dockerアクション（ローカル）
    - id: my-local-docker-action-sh
      name: my local docker action (sh)
      uses: ./.github/actions/my-docker-action-sh
      with:
        aho: 'Ahoooo-sh'

    - id: my-local-docker-action-py
      name: my local docker action (py)
      uses: ./.github/actions/my-docker-action-py
      with:
        aho: 'Ahoooo-py'

    - id: my-local-docker-action-go
      name: my local docker action (go)
      uses: ./.github/actions/my-docker-action-go
      with:
        aho: 'Ahoooo-go'

    # GitHub APIを呼ぶ実験 with github-script
    - id: github-script-get-from-url
      name: get github diff with github-script(request)
      uses: actions/github-script@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # See: context の内容については https://github.com/actions/toolkit/blob/master/packages/github/src/context.ts
        script: |
          console.log('>----- context')
          console.log(context)

          const diff_url = context.payload.pull_request.diff_url
          const result = await github.request(diff_url)
          console.log('>----- result')
          console.log(result)

    - id: github-script-get-gist
      name: get gist by id with github-script(gists.get)
      uses: actions/github-script@v2
      with:
        # gistにアクセスできるtokenは別途発行必要。デフォルトのsecrets.GITHUB_TOKENでは不可
        github-token: ${{ secrets.GH_TOKEN_WITH_GIST_PERMISSION }}
        script: |
          const result = await github.gists.get({
            gist_id: '7112424a9776122f73b10a610572933b'
          })
          console.log('>----- result')
          console.log(result)

    - id: github-script-list-actions-artifacts
      name: get actions artifacts list with github-script(actions.listArtifactsForRepo)
      uses: actions/github-script@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const artifacts = await github.actions.listArtifactsForRepo({
            owner: 'goldeneggg',
            repo: 'structil'
          })
          console.log('>----- artifacts')
          console.log(artifacts)
          console.log('>----- artifacts.data.artifacts[29]')
          console.log(artifacts.data.artifacts[29])
          return artifacts.data.artifacts[29].id

    # その他、公開されているアクションの検証
    - id: labeler
      name: attach label to this pull request with actions/labeler
      # See: https://github.com/actions/labeler
      uses: actions/labeler@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"


    - id: dump-contexts-after
      name: Dump contexts (After)
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        ENV_CONTEXT: ${{ toJson(env) }}
        JOB_CONTEXT: ${{ toJson(job) }}
        STEPS_CONTEXT: ${{ toJson(steps) }}
        RUNNER_CONTEXT: ${{ toJson(runner) }}
        NEEDS_CONTEXT: ${{ toJson(needs) }}
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      if: ${{ always() }}
      run: |
        echo ">>>>>>>>>> show GITHUB_CONTEXT"
        echo "$GITHUB_CONTEXT"
        echo ">>>>>>>>>> show ENV_CONTEXT"
        echo "$ENV_CONTEXT"
        echo ">>>>>>>>>> show JOB_CONTEXT"
        echo "$JOB_CONTEXT"
        echo ">>>>>>>>>> show STEPS_CONTEXT"
        echo "$STEPS_CONTEXT"
        echo ">>>>>>>>>> show RUNNER_CONTEXT"
        echo "$RUNNER_CONTEXT"
        echo ">>>>>>>>>> show NEEDS_CONTEXT"
        echo "$NEEDS_CONTEXT"
        echo ">>>>>>>>>> show STRATEGY_CONTEXT"
        echo "$STRATEGY_CONTEXT"
        echo ">>>>>>>>>> show MATRIX_CONTEXT"
        echo "$MATRIX_CONTEXT"


  job2:
    name: Job2
    runs-on: ubuntu-latest
    needs: job1
    steps:
    - run: echo ${{ needs.job1.outputs.output1 }} ${{ needs.job1.outputs.output2 }}
